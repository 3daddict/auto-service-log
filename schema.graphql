type Make {
  name: String!
  models: [Model]!
}

input MakeInput {
  name: String!
}

type Model {
  name: String!
  year: Year!
}

input ModelInput {
  name: String!
}

type Vehicle {
  make: Make!
  model: Model!
  trim: String
  year: Year!
}

type Garage {
  vehicles: [Vehicle]!
}

scalar Year

input GetModelsInput {
  make: MakeInput!
  year: Year!
}

input CreateVehicleInput {
  make: MakeInput!
  model: ModelInput!
  year: Year!
}

type VehicleResult {
  ok: Boolean
  vehicle: Vehicle
}

type Query {
  getMakes: [Make]

  getMake(name: String! year: Year!): Make

  getModels(input: GetModelsInput!): [Model]

  getVehicles: [Vehicle]

  getVehicle(id: ID!) : Vehicle!
}

type Mutation {
  createVehicle(input: CreateVehicleInput!): VehicleResult
}

schema {
  query: Query
  mutation: Mutation
}